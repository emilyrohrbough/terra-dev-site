{"version":3,"sources":["webpack:///./package.json","webpack:///./lib/terra-dev-site/tool/terra-dev-site/about.a.tool.mdx","webpack:///./lib/loader-components/_Badges.js","webpack:///./lib/loader-components/Badges.module.scss?c4d9"],"names":["Badge","url","src","name","version","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","Object","defineProperty","exports","value","default","_react","_interopRequireDefault","require","_propTypes","_bind","_BadgesModule","obj","__esModule","cx","bind","propTypes","string","isRequired","Badges","npmBadge","createElement","className","href","concat","srcCodeBadge","undefined","_default","module"],"mappings":"yLAGaA,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACf,kBAAC,IAAD,CACEC,IAAI,2CACJC,KAAK,iBACLC,QAAQ,SACRH,IAAKA,K,mkBCDb,IAKMI,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,cAAC,EAAD,CAAOA,QAAQ,UACf,mBAAQ,CACN,GAAM,kBADR,kBAGA,ySACA,mBAAQ,CACN,GAAM,eADR,eAGA,mBAAQ,CACN,GAAM,gBADR,gBAGA,yBAAK,wBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,4CAIL,mBAAQ,CACN,GAAM,iBADR,iBAGA,wBACE,oBAAIA,WAAW,MAAf,2CACA,oBAAIA,WAAW,MAAf,8CACA,oBAAIA,WAAW,MAAf,mBACA,oBAAIA,WAAW,MAAf,0BACA,oBAAIA,WAAW,MAAf,0CAA+D,4BAAYA,WAAW,MAAvB,yBAA/D,6BAEF,mBAAQ,CACN,GAAM,0BADR,0BAGA,oGAAiF,4BAAYA,WAAW,KAAvB,yBAAjF,6CAAgM,4BAAYA,WAAW,KAAvB,sBAAhM,KAAoQ,4BAAYA,WAAW,KAAvB,YAApQ,2LACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,61BAkCL,yCAAsB,4BAAYA,WAAW,KAAvB,YAAtB,2EAAsJ,qBAAGA,WAAW,KAAQ,CACxK,KAAQ,0FAD0I,iBAAtJ,iDAGA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wDAQL,mBAAQ,CACN,GAAM,iBADR,eAGA,qKACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oBAIL,iGACA,gLACA,qDAAkC,4BAAYA,WAAW,KAAvB,sDAClC,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qBAIL,mFACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oBAIL,4FACA,mBAAQ,CACN,GAAM,uBADR,uBAGA,+EAA4D,4BAAYA,WAAW,KAAvB,wBAA5D,2BAAwJ,4BAAYA,WAAW,KAAvB,wBAAxJ,8DAAuR,4BAAYA,WAAW,KAAvB,uCAAvR,4FACA,mBAAQ,CACN,GAAM,eADR,eAGA,2UACA,mBAAQ,CACN,GAAM,eADR,eAGA,uSACA,uBAAG,4BAAYA,WAAW,KAAvB,8CACH,uEACA,wBACE,oBAAIA,WAAW,MAAf,kHACA,oBAAIA,WAAW,MAAf,8FACA,oBAAIA,WAAW,MAAf,iJACA,oBAAIA,WAAW,MAAf,8LAEF,mBAAQ,CACN,GAAM,0BADR,0BAGA,iEACA,yBAAK,wBAAMA,WAAW,OAAU,IAA3B,4OAYL,8DACA,yBAAK,wBAAMA,WAAW,OAAU,IAA3B,2IAUL,mBAAQ,CACN,GAAM,kCADR,kCAGA,yHAAsG,4BAAYA,WAAW,KAAvB,8BAAtG,uDACA,wFAAqE,qBAAGA,WAAW,KAAQ,CACvF,KAAQ,4CADyD,2CAArE,wDAGA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oDAIL,uGAAoF,4BAAYA,WAAW,KAAvB,KAApF,oCAAsK,4BAAYA,WAAW,KAAvB,qBACtK,mBAAQ,CACN,GAAM,4BADR,4BAGA,uFAAoE,4BAAYA,WAAW,KAAvB,qBAApE,yEAA2M,4BAAYA,WAAW,KAAvB,2BAA3M,YAA2R,4BAAYA,WAAW,KAAvB,qBAA3R,sLACA,mBAAQ,CACN,GAAM,SADR,SAGA,qDAAkC,4BAAYA,WAAW,KAAvB,kCAAlC,mCAAgJ,4BAAYA,WAAW,KAAvB,8BAAhJ,KACA,mBAAQ,CACN,GAAM,yBADR,0BAGA,wCAAqB,qBAAGA,WAAW,KAAQ,CACvC,KAAQ,oFADS,sBAArB,MAOJJ,EAAWK,gBAAiB,G,iCChM5BC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuBC,EAAQ,IAExCC,EAAaF,EAAuBC,EAAQ,IAE5CE,EAAQH,EAAuBC,EAAQ,IAEvCG,EAAgBJ,EAAuBC,EAAQ,MAEnD,SAASD,EAAuBK,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEP,QAASO,GAEvF,IAAIE,EAAKJ,EAAML,QAAQU,KAAKJ,EAAcN,SAEtCW,EAAY,CAIdxB,KAAMiB,EAAWJ,QAAQY,OAAOC,WAKhC3B,IAAKkB,EAAWJ,QAAQY,OAKxB3B,IAAKmB,EAAWJ,QAAQY,OAKxBxB,QAASgB,EAAWJ,QAAQY,OAAOC,YAGjCC,EAAS,SAAgBtB,GAC3B,IAAIN,EAAMM,EAAMN,IACZC,EAAOK,EAAML,KACbF,EAAMO,EAAMP,IACZG,EAAUI,EAAMJ,QAEhB2B,EAAwBd,EAAOD,QAAQgB,cAAc,IAAK,CAC5DC,UAAWR,EAAG,SACdS,KAAMjC,GAAO,iCAAiCkC,OAAOhC,EAAM,OAAOgC,OAAO/B,IAC3Da,EAAOD,QAAQgB,cAAc,OAAQ,CACnDC,UAAWR,EAAG,eACbxB,EAAM,UAAY,OAAqBgB,EAAOD,QAAQgB,cAAc,OAAQ,CAC7EC,UAAWR,EAAG,kBACb,IAAIU,OAAO/B,KAEVgC,EAAelC,EAAmBe,EAAOD,QAAQgB,cAAc,IAAK,CACtEC,UAAWR,EAAG,SACdS,KAAMhC,GACQe,EAAOD,QAAQgB,cAAc,OAAQ,CACnDC,UAAWR,EAAG,eACb,UAAwBR,EAAOD,QAAQgB,cAAc,OAAQ,CAC9DC,UAAWR,EAAG,kBACb,gBAAaY,EAChB,OAAoBpB,EAAOD,QAAQgB,cAAc,MAAO,CACtDC,UAAWR,EAAG,oBACbM,EAAUK,IAGfN,EAAOH,UAAYA,EACnB,IAAIW,EAAWR,EACfhB,EAAQE,QAAUsB,G,oBCtElBC,EAAOzB,QAAU,CAAC,MAAQ,+BAA+B,kBAAkB,yCAAyC,aAAa,oCAAoC,gBAAgB","file":"7-dfedab5b0f2d587a638a.js","sourcesContent":["import React from 'react';\nimport Badges from 'terra-dev-site/lib/loader-components/_Badges';\n\nexport const Badge = ({ url }) => (\n      <Badges\n        src=\"https://github.com/cerner/terra-dev-site\"\n        name=\"terra-dev-site\"\n        version=\"6.25.0\"\n        url={url}\n      />\n    );","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Badge } from 'terra-dev-site/package.json?dev-site-package';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Badge mdxType=\"Badge\" />\n    <h1 {...{\n      \"id\": \"terra-dev-site\"\n    }}>{`Terra Dev Site`}</h1>\n    <p>{`Terra-dev-site offers a quick test site to host examples and documentation for your react components or markdown documentation. Terra dev site is intended for speed development of reusable node modules utilizing terra that are intended to be shared between applications.`}</p>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick start`}</h2>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install --save-dev terra-dev-site\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`README.md in the root project directory`}</li>\n      <li parentName=\"ul\">{`Package.json in the root project directory`}</li>\n      <li parentName=\"ul\">{`es6 code in src`}</li>\n      <li parentName=\"ul\">{`transpiled code in lib`}</li>\n      <li parentName=\"ul\">{`babel 7.5 is required to transpile the `}<inlineCode parentName=\"li\">{`dev-site-config/build`}</inlineCode>{` folder at webpack time.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"running-terra-dev-site\"\n    }}>{`Running terra-dev-site`}</h3>\n    <p>{`Using the TerraDevSite webpack plugin, a static site will be built to the `}<inlineCode parentName=\"p\">{`dev-site-config/build`}</inlineCode>{` directory and can be served using either `}<inlineCode parentName=\"p\">{`webpack-dev-server`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`tt-serve`}</inlineCode>{` or served statically using something like gh-pages. A simple example consuming the webpack plugin is shown below. Extending from terra-toolkit's webpack config is highly recommended.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const toolkitWebpackConfig = require('terra-toolkit/config/webpack/webpack.config')\nconst merge = require('webpack-merge');\nconst { TerraDevSite, TerraDevSiteEntrypoints, DirectorySwitcherPlugin, LocalPackageAliasPlugin } = require('terra-dev-site');\n\n/**\n* Generates the file representing app name configuration.\n*/\nconst devSiteConfig = (env = {}, argv = {}) => {\n  const production = argv.p;\n\n  return {\n    entry: TerraDevSiteEntrypoints,\n    plugins: [\n      new TerraDevSite({ env }),\n    ],\n    resolve: {\n      plugins: [\n        new DirectorySwitcherPlugin({\n          shouldSwitch: !production,\n        }),\n        new LocalPackageAliasPlugin({}),\n      ],\n    },\n  };\n};\n\nconst webpackConfig = (env, argv) => (\n  merge(toolkitWebpackConfig(env, argv), devSiteConfig(env, argv))\n);\n\nmodule.exports = webpackConfig;\n`}</code></pre>\n    <p>{`To serve using `}<inlineCode parentName=\"p\">{`tt-serve`}</inlineCode>{`, add the following terra-toolkit command to your package.json. See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cerner/terra-toolkit-boneyard/blob/main/scripts/serve/Serve.md#cli\"\n      }}>{`tt-serve docs`}</a>{` for more information on the command options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"scripts\": {\n    \"start\": \"tt-serve\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"quick-start-1\"\n    }}>{`Quick Start`}</h3>\n    <p>{`After adding the start command to your package.json, run it and navigate to http://localhost:8080/#/site to view the site in your browser:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm run start\n`}</code></pre>\n    <p>{`You will see your readme hosted on the site. Next lets add some pages.`}</p>\n    <p>{`Terra-dev-site will auto discover files base on either the default search patterns in the site.config or the file structure and file extensions used.`}</p>\n    <p>{`Add the following file to: `}<inlineCode parentName=\"p\">{`<package>/src/terra-dev-site/my-first-page.doc.md`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`My first page!\n`}</code></pre>\n    <p>{`Then re-run the site and navigate to it in your browser:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm run start\n`}</code></pre>\n    <p>{`Now you should be able to see your page under the components tab.`}</p>\n    <h2 {...{\n      \"id\": \"auto-page-discovery\"\n    }}>{`Auto Page Discovery`}</h2>\n    <p>{`By default terra-dev-site will look for files in the `}<inlineCode parentName=\"p\">{`./src/terra-dev-site`}</inlineCode>{` folder in dev mode and `}<inlineCode parentName=\"p\">{`./lib/terra-dev-site`}</inlineCode>{` for prod mode. In an monorepo it will search for files in `}<inlineCode parentName=\"p\">{`./packages/{src,lib}/terra-dev-site`}</inlineCode>{`. The file directories and file names are used to build the menu navigation of the site.`}</p>\n    <h3 {...{\n      \"id\": \"directories\"\n    }}>{`Directories`}</h3>\n    <p>{`The directories following the entry point folder (terra-dev-site by default) will be translated into part of the menu structure. The one exception is if you have a 'pageType' directory inside the entry point folder, it will be ignored. This lets you group page types together without impacting your site.`}</p>\n    <h3 {...{\n      \"id\": \"file-naming\"\n    }}>{`File Naming`}</h3>\n    <p>{`Files need to be named using the correct 'pageType' indicator and file extension to be added to the site. This will allow you to add any additional files to support your examples and only have the specified files added as entries to the site. The file name pattern is:`}</p>\n    <p><inlineCode parentName=\"p\">{`<filename>.<group>.<pageType>.<extension>`}</inlineCode></p>\n    <p>{`The components of the file name pattern are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`filename - This is the name that will be added to the side menu for the site. These are sorted alphabetically.`}</li>\n      <li parentName=\"ul\">{`group - (optional) This allows you to sort menu items. The group is sorted alphabetically.`}</li>\n      <li parentName=\"ul\">{`pageType - This indicates which primary navigation item the page will be rendered under. The default pageTypes are 'home', 'doc', and 'test'.`}</li>\n      <li parentName=\"ul\">{`extension - .md and .mdx extensions are supported by default. Other extensions can be added by updating the projects webpack config by adding additional extensions to the resolve field.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"auto-discovery-example\"\n    }}>{`Auto Discovery Example`}</h3>\n    <p>{`Given a directory structure like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`src/\n  terra-dev-site/\n    doc/\n      upgradeGuide.a.doc.md\n      examples.c/\n        supportingFile.js\n        myGreatExample.doc.jsx\n      example.b.doc.js\n    test/\n      testfile.test.js\n      docInTestFolder.doc.js\n`}</code></pre>\n    <p>{`The menu navigation result will be:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-Components-\n  Upgrade Guide\n  Example\n  Examples >\n     My Great Example\n  Test >\n     Doc In Test Folder\n-Test-\n  Testfile\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"path-based-routing-deployments\"\n    }}>{`Path based routing deployments`}</h2>\n    <p>{`To support path based routing for gh-pages style deployments, you must supply an env variable, `}<inlineCode parentName=\"p\">{`TERRA_DEV_SITE_PUBLIC_PATH`}</inlineCode>{`, describing the path for assets to be served from.`}</p>\n    <p>{`For example, for a page hosted on github pages with a url of: `}<a parentName=\"p\" {...{\n        \"href\": \"http://cerner.github.com/terra-dev-site\"\n      }}>{`http://cerner.github.com/terra-dev-site`}</a>{`. The environment variable should be set as follows.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`TERRA_DEV_SITE_PUBLIC_PATH='/terra-dev-site/'\n`}</code></pre>\n    <p>{`Without the environment variable set assets will assume they are served from `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` when they should be served from `}<inlineCode parentName=\"p\">{`/terra-dev-site/`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"how-terra-dev-site-works\"\n    }}>{`How Terra-Dev-Site Works`}</h2>\n    <p>{`The terra-dev-site's webpack plugin calls the pre-build tool `}<inlineCode parentName=\"p\">{`generateAppConfig`}</inlineCode>{`. The generateAppConfig script builds out static configuration to the `}<inlineCode parentName=\"p\">{`./dev-site-config/build`}</inlineCode>{` folder. `}<inlineCode parentName=\"p\">{`generateAppConfig`}</inlineCode>{` also discovers pages based on its configuration. After the static config has been built, webpack continues to run, pulling in the static config and producing the webpack bundle.`}</p>\n    <h2 {...{\n      \"id\": \"debug\"\n    }}>{`Debug`}</h2>\n    <p>{`To get verbose output, add `}<inlineCode parentName=\"p\">{`--env.verboseGenerateAppConfig`}</inlineCode>{` to your webpack command or run `}<inlineCode parentName=\"p\">{`tds-generate-app-config -v`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"further-customization\"\n    }}>{`Further customization:`}</h2>\n    <p>{`Check out our `}<a parentName=\"p\" {...{\n        \"href\": \"/terra-dev-site/dev_tools/terra-dev-site/terra-dev-site/site-config/site-config\"\n      }}>{`Customization docs`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _BadgesModule = _interopRequireDefault(require(\"./Badges.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_BadgesModule.default);\n\nvar propTypes = {\n  /**\n   * component name.\n   */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n   * Source code url\n   */\n  src: _propTypes.default.string,\n\n  /**\n   * url to link to\n   */\n  url: _propTypes.default.string,\n\n  /**\n   * The package version.\n   */\n  version: _propTypes.default.string.isRequired\n};\n\nvar Badges = function Badges(props) {\n  var src = props.src,\n      name = props.name,\n      url = props.url,\n      version = props.version;\n\n  var npmBadge = /*#__PURE__*/_react.default.createElement(\"a\", {\n    className: cx('badge'),\n    href: url || \"https://www.npmjs.org/package/\".concat(name, \"/v/\").concat(version)\n  }, /*#__PURE__*/_react.default.createElement(\"span\", {\n    className: cx('badge-name')\n  }, url ? 'package' : 'npm'), /*#__PURE__*/_react.default.createElement(\"span\", {\n    className: cx('badge-version')\n  }, \"v\".concat(version)));\n\n  var srcCodeBadge = src ? /*#__PURE__*/_react.default.createElement(\"a\", {\n    className: cx('badge'),\n    href: src\n  }, /*#__PURE__*/_react.default.createElement(\"span\", {\n    className: cx('badge-name')\n  }, \"github\"), /*#__PURE__*/_react.default.createElement(\"span\", {\n    className: cx('badge-version')\n  }, \"source\")) : undefined;\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: cx('badge-container')\n  }, npmBadge, srcCodeBadge);\n};\n\nBadges.propTypes = propTypes;\nvar _default = Badges;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"Badges-module__badge___3MvWj\",\"badge-container\":\"Badges-module__badge-container___2N8Uj\",\"badge-name\":\"Badges-module__badge-name___2yQFZ\",\"badge-version\":\"Badges-module__badge-version___8krqj\"};"],"sourceRoot":""}