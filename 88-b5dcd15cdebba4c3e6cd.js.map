{"version":3,"sources":["webpack:///./lib/terra-dev-site/tool/terra-dev-site/SiteConfig.b/page.config.c.tool.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+tBAOA,IAKMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,eADR,eAGA,mBAAQ,CACN,GAAM,8BADR,8BAGA,+LAA4K,4BAAYC,WAAW,KAAvB,iBAA5K,yGAA+U,4BAAYA,WAAW,KAAvB,kBAA/U,eAAyZ,4BAAYA,WAAW,KAAvB,mBAAzZ,KACA,wBACE,oBAAIA,WAAW,MAAf,sCACA,oBAAIA,WAAW,MAAf,8GACA,oBAAIA,WAAW,MAAf,yGACA,oBAAIA,WAAW,MAAf,8GAEF,uDAAoC,4BAAYA,WAAW,KAAvB,qBAApC,8CACA,mBAAQ,CACN,GAAM,sBADR,sBAGA,4GAAyF,4BAAYA,WAAW,KAAvB,eAAzF,qFAAsO,4BAAYA,WAAW,KAAvB,YAAtO,8EACA,mEAAgD,4BAAYA,WAAW,KAAvB,QAAhD,SAA0G,4BAAYA,WAAW,KAAvB,QAA1G,yIACA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,WAApB,0CACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,QAApB,4DAAkI,4BAAYA,WAAW,MAAvB,MAAlI,KAAuL,4BAAYA,WAAW,MAAvB,OAAvL,QAAgP,4BAAYA,WAAW,MAAvB,OAChP,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,SAApB,qEAEF,8GAA2F,4BAAYA,WAAW,KAAvB,SAA3F,oEACA,mBAAQ,CACN,GAAM,yBADR,yBAGA,yBAAK,wBAAMA,WAAW,OAAU,IAA3B,+GAML,mBAAQ,CACN,GAAM,4BADR,4BAGA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,s0DA4ETJ,EAAWK,gBAAiB","file":"88-b5dcd15cdebba4c3e6cd.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"page-config\"\n    }}>{`Page Config`}</h1>\n    <h2 {...{\n      \"id\": \"auto-generated-page-config\"\n    }}>{`Auto Generated Page Config`}</h2>\n    <p>{`Terra-dev-site uses the pages configuration to recursively build the menu navigation and the content routes. The page config will be generated for you using the the `}<inlineCode parentName=\"p\">{`generatePages`}</inlineCode>{` config included in the site config. The following options available to be listed added as objects in `}<inlineCode parentName=\"p\">{`searchPatterns`}</inlineCode>{` key in the `}<inlineCode parentName=\"p\">{`generate-config`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`root: there search pattern starts.`}</li>\n      <li parentName=\"ul\">{`entryPoint: add to the search pattern and is the beginning of the directory structure for menu navigation.`}</li>\n      <li parentName=\"ul\">{`dist: (option) directory containing transpiled code to use if hot reloading is enabled and is in prod`}</li>\n      <li parentName=\"ul\">{`source: (option) directory containing source code to use if hot reloading is enabled and not in prod mode`}</li>\n    </ul>\n    <p>{`When you start the site, the `}<inlineCode parentName=\"p\">{`generateAppConfig`}</inlineCode>{` script will use these to build the pages.`}</p>\n    <h2 {...{\n      \"id\": \"custom-page-config\"\n    }}>{`Custom Page Config`}</h2>\n    <p>{`If you need or want custom page config, you can provide your own by including the `}<inlineCode parentName=\"p\">{`pagesConfig`}</inlineCode>{` key in the site config. Below is an example page config. The config is sorted by `}<inlineCode parentName=\"p\">{`Pagetype`}</inlineCode>{` such that each page type key is an ordered arrays of page configurations.`}</p>\n    <p>{`This page configuration must provide the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` keys. These keys are needed to successfully create the navigation and routes. Then use the following keys to add meaningful content:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`content`}</inlineCode>{` - the content to render at this route`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` - the file type. Options include but are not limited to `}<inlineCode parentName=\"li\">{`js`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`jsx`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`md`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pages`}</inlineCode>{` - an array of pages configuration objects for nested navigation`}</li>\n    </ul>\n    <p>{`Terra-dev-site will create sub-navigation for any component configuration using the `}<inlineCode parentName=\"p\">{`pages`}</inlineCode>{` key and will add a default Placeholder to render at that route.`}</p>\n    <h4 {...{\n      \"id\": \"component-api-example\"\n    }}>{`Component API Example`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`  'get-started': {\n    name: 'Get Started',\n    path: '/get-started'\n    component: GetStarted,\n  },\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"full-page-config-example\"\n    }}>{`Full Page Config Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const config = {\n  // doc and test map to page types specified in the navigation config.\n  doc: [\n    {\n      name: 'Getting Started',\n      path: '/getting-started',\n      content: '../src/terra-dev-site/doc/gettingStarted.md',\n      type: 'md'\n    },\n    {\n      name: 'Configuration',\n      path: '/configuration',\n      // Pages have the same schema as described above, can recurse infinitely.\n      pages: [\n        {\n          name: 'site.config',\n          path: '/site-config',\n          content: '../src/terra-dev-site/doc/Configuration/site.config.md',\n          type: 'md'\n        },\n        {\n          name: 'navigation.config',\n          path: '/navigation-config',\n          content: '../src/terra-dev-site/doc/Configuration/navigation.config.md',\n          type: 'md'\n        },\n        {\n          name: 'page.config',\n          path: '/page-config',\n          content: '../src/terra-dev-site/doc/Configuration/page.config.md',\n          type: 'md'\n        },\n        {\n          name: 'webpack.config',\n          path: '/webpack-config',\n          content: '../src/terra-dev-site/doc/Configuration/webpack.config.md',\n          type: 'md'\n        }\n      ]\n    },\n    {\n      name: 'Upgrade Guides',\n      path: '/terra-dev-site/upgrade-guides',\n      pages: [\n        {\n          name: 'v1.0.0',\n          path: '/v-1-0-0',\n          content: '../src/terra-dev-site/doc/UpgradeGuides/v1.0.0.md',\n          type: 'md'\n        },\n        {\n          name: 'v0.5',\n          path: '/v-0-5',\n          content: '../src/terra-dev-site/doc/UpgradeGuides/v0.5',\n          type: 'jsx'\n        }\n      ]\n    }\n  ],\n  test: [\n    {\n      name: 'test example',\n      path: '/test-example',\n      content: '../src/terra-dev-site/doc/testExample',\n      type: 'md'\n    },\n  ],\n};\n\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}