{"version":3,"sources":["webpack:///./lib/terra-dev-site/tool/terra-dev-site/UpgradeGuides.f/v0.5.z.tool.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+tBAOA,IAKMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,sBADR,wBAGA,kGAA+E,4BAAYC,WAAW,KAAvB,OAA/E,OAAsI,4BAAYA,WAAW,KAAvB,SAAtI,KACA,mBAAQ,CACN,GAAM,aADR,aAGA,8TACA,yEAAsD,4BAAYA,WAAW,KAAvB,6BAAtD,OAAmI,4BAAYA,WAAW,KAAvB,iCAAnI,wHAEA,mBAAQ,CACN,GAAM,eADR,eAGA,6MACA,+MACA,mBAAQ,CACN,GAAM,yBADR,yBAGA,8KAA2J,4BAAYA,WAAW,KAAvB,kBAA3J,8BAAoP,4BAAYA,WAAW,KAAvB,mBAApP,uGACA,sGAKJJ,EAAWK,gBAAiB","file":"91-e7671a6f1095f0d0b16f.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"v050-upgrade-guide\"\n    }}>{`v0.5.0 Upgrade Guide`}</h1>\n    <p>{`This document will provide information on upgrading from Terra Dev Site `}<inlineCode parentName=\"p\">{`0.x`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`0.5.0`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"webpack-4\"\n    }}>{`Webpack 4`}</h2>\n    <p>{`Terra-dev-site now uses Terra-Toolkit's default webpack config as its base config. Terra-dev-site then adds an entry, the html-webpack-plugin and an additional resolve path for custom site configuration. Unlike terra-toolkit, this webpack config is ready to use without needing any wrapping.`}</p>\n    <p>{`The default webpack config has been moved from `}<inlineCode parentName=\"p\">{`src/config/webpack.config`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`config/webpack/webpack.config`}</inlineCode>{`;\nMuch like terra-toolkit the dev and prod webpack configs have been merged into one. See that guide for more info.`}</p>\n    <h2 {...{\n      \"id\": \"webdriverio\"\n    }}>{`WebdriverIO`}</h2>\n    <p>{`Terra Dev Site provides a default webdriver IO config. This config adds in some additional opinions specific to terra-dev-site, and unlike terra-toolkit, is ready out of the box.`}</p>\n    <p>{`The webdriver config pulls in the default webpack config, the root selector for tests when terra dev site is used as a driver and a before hook to refresh the page after each test.`}</p>\n    <h2 {...{\n      \"id\": \"terra-dev-site-config\"\n    }}>{`Terra-Dev-Site Config`}</h2>\n    <p>{`We're preparing to generate more code on launch of terra-dev-site instead of generating it client side. For the first step we're requiring that the `}<inlineCode parentName=\"p\">{`site.config.js`}</inlineCode>{` file be placed inside the `}<inlineCode parentName=\"p\">{`dev-site-config`}</inlineCode>{` folder at the project root for better organization as well as a location to place generated items.`}</p>\n    <p>{`The placeholder image and logo image are now defaulted to the Terra image.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}