{"version":3,"sources":["webpack:///./lib/terra-dev-site/tool/terra-dev-site/SiteConfig.b/webpack.config.e.tool.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+tBAOA,IAKMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cALS,UAKT,KAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAG,qBAAGC,WAAW,KAAQ,CACrB,KAAQ,uGADT,uBAAH,kMAGA,+IACA,iGACA,yBAAK,wBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ufAwBL,mBAAQ,CACN,GAAM,sBADR,sBAGA,wBACE,oBAAIA,WAAW,MACb,mBAAGA,WAAW,MAAd,WAA+B,qBAAGA,WAAW,KAAQ,CACjD,KAAQ,gGADmB,gCAA/B,MAIF,oBAAIA,WAAW,MACb,mBAAGA,WAAW,MAAd,iEAEF,oBAAIA,WAAW,MACb,mBAAGA,WAAW,MAAd,qFAEF,oBAAIA,WAAW,MACb,mBAAGA,WAAW,MAAd,gEAEF,oBAAIA,WAAW,MACb,mBAAGA,WAAW,MAAd,8EAORJ,EAAWK,gBAAiB","file":"90-3974d8c02839436afd18.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"webpack-config\"\n    }}>{`Webpack Config`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cerner/terra-dev-site/blob/main/config/webpack/terra-dev-site.webpack.config.js\"\n      }}>{`This webpack config`}</a>{` is the entry point for spinning up terra-dev-site. By either extending or using directly terra-dev-site's webpack config, the site will render with either the custom or default site config.`}</p>\n    <p>{`Because terra-dev-site's webpack config is a function, we recommend the usage of webpack-merge to extend the config.`}</p>\n    <p>{`Here is an example where we extend the default config to alias moment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const path = require('path');\nconst merge = require('webpack-merge');\nconst defaultWebpackConfig = require('terra-dev-site/config/webpack/webpack.config');\n\nconst config = () => {\n  const momentAlias = path.resolve(process.cwd(), 'node_modules', 'moment');\n\n  return {\n    resolve: {\n      alias: {\n        moment: momentAlias,\n      },\n    },\n  };\n};\n\nconst mergedConfig = (env, argv) => (\n  merge(defaultWebpackConfig(env, argv), config())\n);\n\nmodule.exports = mergedConfig;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"points-of-interest\"\n    }}>{`Points of interest`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Extends `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/cerner/terra-toolkit-boneyard/blob/main/config/webpack/webpack.config.js\"\n          }}>{`terra-toolkit webpack config`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Entrypoint is defaulted to the index page in terra-dev-site.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`HtmlWebpackPlugin will run to configure the default index.html in terra-dev-site`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A resolve entry will be added to find the generated config.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you're a mono-repo your package repos will automatically be aliased.`}</p>\n      </li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}